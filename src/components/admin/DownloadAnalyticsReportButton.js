import React from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

function DownloadAnalyticsReportButton({
  analytics,
  companies,
  records,
  adminEmail = "Admin",
  chartRefs = {},
}) {
  const exportToPDF = async () => {
    const pdf = new jsPDF("p", "mm", "a4");
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const padding = 10;
    const contentWidth = pageWidth - padding * 2;
    const contentHeight = pageHeight - padding * 2;
    let pageCount = 1;

    const drawPageBorder = () => {
      pdf.setDrawColor(60, 120, 216);
      pdf.setLineWidth(0.8);
      pdf.rect(padding, padding, contentWidth, contentHeight, "S");
    };

    const drawFooter = () => {
      pdf.setDrawColor(200, 200, 200);
      pdf.setLineWidth(0.3);
      pdf.line(padding, pageHeight - 10, pageWidth - padding, pageHeight - 10);
      pdf.setFontSize(9);
      pdf.setTextColor(120);
      pdf.text(`XYZ Logistics Portal | Page ${pageCount}`, pageWidth / 2, pageHeight - 5, {
        align: "center",
      });
    };

    const addNewPage = () => {
      pdf.addPage();
      pageCount++;
      drawPageBorder();
      drawFooter();
    };

    // First Page: Textual Summary
    drawPageBorder();
    drawFooter();
    let y = padding + 10;
    pdf.setFontSize(18);
    pdf.setTextColor(33, 37, 41);
    pdf.text("XYZ Logistics Portal - Analytics Report", pageWidth / 2, y, {
      align: "center",
    });
    y += 10;

    pdf.setFontSize(11);
    pdf.setTextColor(80);
    pdf.text(`Generated by: ${adminEmail}`, padding + 4, y);
    y += 6;
    pdf.text(`Generated on: ${new Date().toLocaleString()}`, padding + 4, y);
    y += 10;

    const section = (title, lines) => {
      pdf.setFontSize(13);
      pdf.setTextColor(44, 62, 80);
      pdf.text(title, padding + 4, y);
      y += 7;
      pdf.setFontSize(11);
      pdf.setTextColor(33, 33, 33);
      lines.forEach((line) => {
        pdf.text(line, padding + 8, y);
        y += 6;
      });
      y += 4;
    };

    section("Summary", [
      `Total Companies: ${companies.length}`,
      `Total Records: ${analytics.total}`,
    ]);

    section(
      "Delivery Status Counts",
      Object.entries(analytics.statusCounts).map(
        ([status, count]) => `â€¢ ${status}: ${count}`
      )
    );

    section(
      "Latest Upload per Company",
      Object.entries(analytics.latestUpload).map(
        ([company, date]) => `â€¢ ${company}: ${date}`
      )
    );

    section("Highlights", [
      `Most Active Driver: ${analytics.mostActiveDriver || "N/A"}`,
      `Most Frequent Route: ${analytics.mostFrequentRoute || "N/A"}`,
    ]);

    // Chart sections
    const chartSections = [
      { ref: chartRefs.topCompanyRef },
      { ref: chartRefs.deliverySuccessRef },
      { ref: chartRefs.driverWorkloadRef },
      { ref: chartRefs.dailyUploadTrendRef },
      { ref: chartRefs.routePerformanceRef },
      { ref: chartRefs.companyContributionRef },
      { ref: chartRefs.statusProgressRef },
      { ref: chartRefs.deliveryVolumeRef },
      { ref: chartRefs.pendingAgingRef },
    ];

    for (let i = 0; i < chartSections.length; i += 2) {
      addNewPage();

      const top = chartSections[i];
      const bottom = chartSections[i + 1];

      const renderChart = async (ref, yOffset) => {
        if (ref && ref.current) {
          const canvas = await html2canvas(ref.current, { scale: 2 });
          const imgData = canvas.toDataURL("image/png");
          const maxWidth = contentWidth - 16;
          const maxHeight = contentHeight / 2 - 20;

          const imgProps = pdf.getImageProperties(imgData);
          const ratio = Math.min(
            maxWidth / imgProps.width,
            maxHeight / imgProps.height
          );
          const imgWidth = imgProps.width * ratio;
          const imgHeight = imgProps.height * ratio;

          const x = padding + (contentWidth - imgWidth) / 2;
          const y = padding + yOffset;

          pdf.addImage(imgData, "PNG", x, y, imgWidth, imgHeight, undefined, "FAST");
        }
      };

      await renderChart(top.ref, 14);
      if (bottom) {
        await renderChart(bottom.ref, contentHeight / 2 + 6);
      }
    }

    pdf.save("logistics_analytics_report.pdf");
  };

  return (
    <button
      onClick={exportToPDF}
      className="mt-6 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm border shadow"
    >
      ðŸ“¥ Download Analytics Report (PDF)
    </button>
  );
}

export default DownloadAnalyticsReportButton;
